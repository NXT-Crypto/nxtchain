package gonetic

// GoNetic package to create peer-to-peer connections

import (
	"bufio"
	"fmt"
	"net"
	"strings"
	"sync"
)

type OutputFunc func(string)

type Peer struct {
	Port           string
	connString     string
	maxPeerList    int
	connectedPeers sync.Map
	listener       net.Listener
	Output         OutputFunc
	stopChan       chan struct{}
	wg             sync.WaitGroup
}

func NewPeer(output OutputFunc, maxPeerList int, port ...string) (*Peer, error) {
	var assignedPort string
	if len(port) > 0 && port[0] != "" {
		assignedPort = port[0]
	} else {
		assignedPort = "0"
	}

	if output == nil {
		output = func(msg string) {
			fmt.Println(msg)
		}
	}

	if maxPeerList < 2 {
		return nil, fmt.Errorf("unable to create a peer with fewer than 2 connections")
	}

	return &Peer{
		Port:        assignedPort,
		Output:      output,
		maxPeerList: maxPeerList,
		stopChan:    make(chan struct{}),
	}, nil
}

func (p *Peer) Start() error {
	port := p.Port
	if port == "" {
		port = "0"
	}
	var err error

	p.listener, err = net.Listen("tcp6", "["+getLocalIP()+"]:"+p.Port)
	if err != nil {
		return fmt.Errorf("failed to start node on port %s: %v", p.Port, err)
	}
	addr := p.listener.Addr().(*net.TCPAddr)
	p.connString = fmt.Sprintf("[%s]:%d", getLocalIP(), addr.Port)
	p.Port = fmt.Sprintf("%d", addr.Port)

	p.wg.Add(1)
	go func() {
		defer p.wg.Done()
		for {
			conn, err := p.listener.Accept()
			if err != nil {
				select {
				case <-p.stopChan:
					return
				default:
					fmt.Println("Failed to accept connection:", err)
					continue
				}
			}

			if len(p.GetConnectedPeers()) >= p.maxPeerList {
				conn.Close()
				continue
			}

			remoteAddr := conn.RemoteAddr().String()
			if _, exists := p.connectedPeers.Load(remoteAddr); exists {
				p.Output(fmt.Sprintf("Peer %s is already connected. Closing connection.", remoteAddr))
				conn.Close()
				continue
			}
			go p.handleConnection(conn)
		}
	}()

	<-p.stopChan
	return nil
}

func (p *Peer) SendToPeer(connString string, message string) error {
	value, ok := p.connectedPeers.Load(connString)
	if !ok {
		return fmt.Errorf("no peer found with connString: %s", connString)
	}

	conn, ok := value.(net.Conn)
	if !ok {
		return fmt.Errorf("invalid connection for peer: %s", connString)
	}

	return p.Send(conn, message)
}

func (p *Peer) Send(conn net.Conn, data string) error {
	writer := bufio.NewWriter(conn)
	_, err := writer.WriteString(data + "\n")
	if err != nil {
		return err
	}
	return writer.Flush()
}

func (p *Peer) AskForPeers(conn net.Conn) {
	p.Output(fmt.Sprintf("[ASKING FOR OTHER PEERS] %s", p.connString))
	err := p.Send(conn, "GET_PEERS")
	if err != nil {
		p.Output(fmt.Sprintf("[ERROR] failed to ask for peers: %v", err))
		conn.Close()
		return
	}
}

func (p *Peer) UpdatePeers() {
	p.connectedPeers.Range(func(key, value interface{}) bool {
		conn := value.(net.Conn)
		p.AskForPeers(conn)
		return true
	})
}

func (p *Peer) handleConnection(conn net.Conn) {
	remoteAddr := conn.RemoteAddr().String()
	p.Output(fmt.Sprintf("[NEW PEER HANDLING] %s from %s", p.connString, remoteAddr))
	defer func() {
		p.connectedPeers.Delete(remoteAddr)
		conn.Close()
	}()

	p.connectedPeers.Store(remoteAddr, conn)
	p.Output(fmt.Sprintf("[NEW CONNECTION] %s", remoteAddr))

	reader := bufio.NewReader(conn)
	for {
		messageOrig, err := reader.ReadString('\n')
		if err != nil {
			p.Output(fmt.Sprintf("[INFO] Connection closed: %s", remoteAddr))
			return
		}
		message := strings.TrimSpace(messageOrig)
		if strings.HasPrefix(message, "GET_") {
			switch message {
			case "GET_PEERS":
				var peerList []string
				p.connectedPeers.Range(func(key, value interface{}) bool {
					if conn, ok := value.(net.Conn); ok {
						peerAddr := conn.RemoteAddr().String()
						peerList = append(peerList, peerAddr)
					}
					return true
				})
				response := "NEW_PEERS_" + strings.Join(peerList, ";")
				p.Send(conn, response)
				p.Output(fmt.Sprintf("[SENDING PEERS to %s] %s", remoteAddr, response))
			}
		} else if strings.HasPrefix(message, "NEW_PEERS_") {
			peersData := strings.TrimPrefix(message, "NEW_PEERS_")
			p.Output(fmt.Sprintf("[NEW PEERS RECEIVED] %s", peersData))
			peers := strings.Split(peersData, ";")
			for _, peer := range peers {
				if peer != "" && peer != p.connString && peer != remoteAddr {
					go p.Connect(peer)
				}
			}
		} else if strings.HasPrefix(message, "MYSHARE_") {
			peerConnString := strings.TrimPrefix(message, "MYSHARE_")
			if peerConnString != remoteAddr {
				p.connectedPeers.Delete(remoteAddr)
				p.connectedPeers.Store(peerConnString, conn)
			}
			p.AskForPeers(conn)
		}
	}
}

func (p *Peer) Connect(connString string) error {
	if connString == p.connString {
		p.Output(fmt.Sprintf("[WARNING] Attempted self-connection to %s", connString))
		return fmt.Errorf("self-connection attempted")
	}
	p.Output(fmt.Sprintf("[CONNECTING TO PEER] %s", connString))
	conn, err := net.Dial("tcp6", connString)
	if err != nil {
		p.Output(fmt.Sprintf("[ERROR] failed to connect to peer %s: %v", connString, err))
		return fmt.Errorf("failed to connect to peer %s: %v", connString, err)
	}

	p.connectedPeers.Store(connString, conn)
	go p.handleConnection(conn)

	p.Output(fmt.Sprintf("[SENDING MYSHARE] %s", connString))
	err = p.Send(conn, "MYSHARE_"+p.connString)
	if err != nil {
		p.Output(fmt.Sprintf("[ERROR] failed to send MYSHARE to %s: %v", connString, err))
		conn.Close()
		return fmt.Errorf("failed to send MYSHARE to %s: %v", connString, err)
	}

	return nil
}

func (p *Peer) Stop() {
	close(p.stopChan)
	p.listener.Close()
	p.connectedPeers.Range(func(key, value interface{}) bool {
		conn := value.(net.Conn)
		conn.Close()
		return true
	})
	p.wg.Wait()
}

func getLocalIP() string {
	ifaces, err := net.Interfaces()
	if err != nil {
		return ""
	}
	for _, iface := range ifaces {
		if iface.Flags&net.FlagUp == 0 || iface.Flags&net.FlagLoopback != 0 {
			continue
		}
		addrs, err := iface.Addrs()
		if err != nil {
			continue
		}
		for _, addr := range addrs {
			var ip net.IP
			switch v := addr.(type) {
			case *net.IPNet:
				ip = v.IP
			case *net.IPAddr:
				ip = v.IP
			}
			if ip != nil && !ip.IsLoopback() && ip.To4() == nil {
				return ip.String()
			}
		}
	}
	return "::"
}

func (p *Peer) GetConnectedPeers() []string {
	var peers []string
	p.connectedPeers.Range(func(key, value interface{}) bool {
		peerID := key.(string)
		peers = append(peers, peerID)
		return true
	})
	return peers
}

func (p *Peer) GetConnString() string {
	return p.connString
}
